@kotlin.Metadata
public final class SimpleLock {
    // source: 'SimpleLockTest.kt'
    private final static @org.jetbrains.annotations.NotNull field _locked$FU: java.util.concurrent.atomic.AtomicIntegerFieldUpdater
    private volatile @kotlin.jvm.Volatile field _locked: int
    static method <clinit>(): void
    public method <init>(): void
    public final method loop$atomicfu(@org.jetbrains.annotations.NotNull p0: java.util.concurrent.atomic.AtomicIntegerFieldUpdater, @org.jetbrains.annotations.NotNull p1: kotlin.jvm.functions.Function1, @org.jetbrains.annotations.Nullable p2: java.lang.Object): void
    public final method withLock(@org.jetbrains.annotations.NotNull p0: kotlin.jvm.functions.Function0): java.lang.Object
}

@kotlin.Metadata
final class SimpleLockTest$withLock$result$1 {
    // source: 'SimpleLockTest.kt'
    enclosing method SimpleLockTest.withLock()V
    public final static field INSTANCE: SimpleLockTest$withLock$result$1
    inner (anonymous) class SimpleLockTest$withLock$result$1
    static method <clinit>(): void
    method <init>(): void
    public synthetic bridge method invoke(): java.lang.Object
    public final @org.jetbrains.annotations.NotNull method invoke(): java.lang.String
}

@kotlin.Metadata
public final class SimpleLockTest {
    // source: 'SimpleLockTest.kt'
    inner (anonymous) class SimpleLockTest$withLock$result$1
    public method <init>(): void
    public final method withLock(): void
}

@kotlin.Metadata
public final class SimpleLockTestKt {
    // source: 'SimpleLockTest.kt'
    public final static @org.jetbrains.annotations.NotNull method box(): java.lang.String
}
